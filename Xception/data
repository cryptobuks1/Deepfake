# -*- coding: utf-8 -*-
"""
Created on Thu Oct 29 16:10:18 2020

@author: jeremy
"""
from sklearn.preprocessing import OneHotEncoder
from torchvision import  transforms
from torch.utils.data import DataLoader ,Dataset , random_split
import joblib
import numpy as np 
import torch
import os
import cv2


def showimg(pic):
    cv2.imshow('g',pic)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


class deepfakedata(Dataset):
    def __init__(self , idnum , real , fake ):
        
        self.real = []    # real 的所有圖片
        for i in range(0,10):
           path = real+'/id'+str(idnum)+'_000'+str(i) 
           if os.path.exists(path):
               for j in range(1,51):
                   if os.path.exists(path+'/'+str(j)+'.jpg'):
                       self.real.append(path+'/'+str(j)+'.jpg')
        
        self.fake = []   # fake 的所有圖片
        for i in range(0,62):
            for j in range(0,10):
                path = fake+'/id'+str(idnum)+'_id'+str(i)+'_000'+str(j)
                if os.path.exists(path):
                    for k in range(1,51):
                        if os.path.exists(path+'/'+str(k)+'.jpg'):
                            self.fake.append(path+'/'+str(k)+'.jpg')
           
    def __len__(self):   #抓幾張圖片
        """
        real : 0 ~ 449
        fake : 450 ~ 5649
        """
        return len(self.fake)+len(self.real)   # idx 從 0 開始算
    
    def __getitem__(self  , idx ):   # 弄好 (img , label)
        labels =[]
        if idx < len(self.real):
            
            if os.path.exists(self.real[idx]):
                pic = cv2.imread(self.real[idx])
                pic = cv2.resize(pic , (299,299))
                pic = np.transpose(pic , (2,1,0))
            else:
                print("load image failed")
            labels = 0
        else:
            idx = idx - len(self.real)
            if os.path.exists(self.fake[idx]):
                pic = cv2.imread(self.fake[idx])
                pic = cv2.resize(pic , (299,299))
                pic = np.transpose(pic , (2,1,0))
            else:
                print("load image failed")
            labels = 1
        
        sample = {'image': pic , 'label': labels}      
            
        return sample
        
a = deepfakedata(0, 'D:/Celeb-DF-v2/train/real' , 'D:/Celeb-DF-v2/train/fake' )



