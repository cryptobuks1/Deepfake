# -*- coding: utf-8 -*-
"""
Created on Thu Oct 29 16:10:18 2020

@author: jeremy
"""
from sklearn.preprocessing import OneHotEncoder
from torchvision import  transforms
from torch.utils.data import DataLoader ,Dataset , random_split
import joblib
import numpy as np 
import torch
import os
import cv2


def showimg(pic):
    cv2.imshow('g',pic)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def createpkl(path , idk):
    train = []
    
    for i in range(0,2):
        ppath = path + str(idk) + '/image_' + str(i+1) + '.jpg'
       
        if len(os.listdir(path+str(idk))) >= 2:
            
            pic = cv2.imread(ppath)
            pic = cv2.resize(pic,(299,299))
            
            train.append(pic)     
        
    train = np.array(train)  
    train = np.transpose(train , (0,3,1,2))
    return train


class deepfakedata(Dataset):
    def __init__(self , root_dir):
        self.root_dir = root_dir
        
    def __len__(self):   #抓幾部影片
        return 350
    
    def __getitem__(self  , idx ):   # 弄好 (img , label)
        
        if torch.is_tensor(idx):
            idx = idx.tolist()
        
        pa = self.root_dir + '/video_'
        if idx ==174:
            idx = 351
        
        imgs = createpkl( pa , idx) # list 裡面裝2個 frames
        labels =[]
        if(self.root_dir[-1] == 'l'):
            label = 0
        else:
            label = 1
        for i in range(2):
            labels.append(label) # label *50
        
        sample = {'image': imgs, 'label': labels}      
        
        return sample


face = deepfakedata(root_dir='D:/framereal')

deepfake = deepfakedata(root_dir='D:/framesynthesis')

DATA = DataLoader(face , batch_size = 1 , shuffle = False , num_workers = 0 )
